{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler } from \"../handlers/gestureHandlers\";\nimport { State } from \"../State\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DRAG_TOSS = 0.05;\n\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(props) {\n    var _this;\n\n    _classCallCheck(this, Swipeable);\n\n    _this = _super.call(this, props);\n\n    _this.updateAnimatedEvent = function (props, state) {\n      var friction = props.friction,\n          overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n          rowTranslation = state.rowTranslation,\n          _state$leftWidth = state.leftWidth,\n          leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n          _state$rowWidth = state.rowWidth,\n          rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n          rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n          overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n          _props$overshootRight = props.overshootRight,\n          overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    };\n\n    _this.onTapHandlerStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    };\n\n    _this.onHandlerStateChange = function (ev) {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n    };\n\n    _this.handleRelease = function (ev) {\n      var _ev$nativeEvent = ev.nativeEvent,\n          velocityX = _ev$nativeEvent.velocityX,\n          dragX = _ev$nativeEvent.translationX;\n      var _this$state = _this.state,\n          _this$state$leftWidth = _this$state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n          _this$state$rowWidth = _this$state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n          rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props = _this.props,\n          friction = _this$props.friction,\n          _this$props$leftThres = _this$props.leftThreshold,\n          leftThreshold = _this$props$leftThres === void 0 ? leftWidth / 2 : _this$props$leftThres,\n          _this$props$rightThre = _this$props.rightThreshold,\n          rightThreshold = _this$props$rightThre === void 0 ? rightWidth / 2 : _this$props$rightThre;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n\n    _this.animateRow = function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {\n            _this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {\n            _this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            _this.props.onSwipeableClose == null ? void 0 : _this.props.onSwipeableClose();\n          } else {\n            _this.props.onSwipeableOpen == null ? void 0 : _this.props.onSwipeableOpen();\n          }\n        }\n      });\n\n      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {\n        _this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {\n        _this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        _this.props.onSwipeableWillClose == null ? void 0 : _this.props.onSwipeableWillClose();\n      } else {\n        _this.props.onSwipeableWillOpen == null ? void 0 : _this.props.onSwipeableWillOpen();\n      }\n    };\n\n    _this.onRowLayout = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    };\n\n    _this.currentOffset = function () {\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n          rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    };\n\n    _this.close = function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    };\n\n    _this.openLeft = function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    };\n\n    _this.openRight = function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    };\n\n    var dragX = new Animated.Value(0);\n    _this.state = {\n      dragX: dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n\n    _this.updateAnimatedEvent(props, _this.state);\n\n    _this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: dragX\n      }\n    }], {\n      useNativeDriver: props.useNativeAnimations\n    });\n    return _this;\n  }\n\n  _createClass(Swipeable, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rowState = this.state.rowState;\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          renderLeftActions = _this$props2.renderLeftActions,\n          renderRightActions = _this$props2.renderRightActions;\n\n      var left = renderLeftActions && _jsxs(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }],\n        children: [renderLeftActions(this.showLeftAction, this.transX), _jsx(View, {\n          onLayout: function onLayout(_ref4) {\n            var nativeEvent = _ref4.nativeEvent;\n            return _this2.setState({\n              leftWidth: nativeEvent.layout.x\n            });\n          }\n        })]\n      });\n\n      var right = renderRightActions && _jsxs(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }],\n        children: [renderRightActions(this.showRightAction, this.transX), _jsx(View, {\n          onLayout: function onLayout(_ref5) {\n            var nativeEvent = _ref5.nativeEvent;\n            return _this2.setState({\n              rightOffset: nativeEvent.layout.x\n            });\n          }\n        })]\n      });\n\n      return _jsx(PanGestureHandler, _objectSpread(_objectSpread({\n        activeOffsetX: [-10, 10]\n      }, this.props), {}, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange,\n        children: _jsxs(Animated.View, {\n          onLayout: this.onRowLayout,\n          style: [styles.container, this.props.containerStyle],\n          children: [left, right, _jsx(TapGestureHandler, {\n            enabled: rowState !== 0,\n            onHandlerStateChange: this.onTapHandlerStateChange,\n            children: _jsx(Animated.View, {\n              pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n              style: [{\n                transform: [{\n                  translateX: this.transX\n                }]\n              }, this.props.childrenContainerStyle],\n              children: children\n            })\n          })]\n        })\n      }));\n    }\n  }]);\n\n  return Swipeable;\n}(Component);\n\nexport { Swipeable as default };\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"names":["React","Component","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","props","updateAnimatedEvent","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","onTapHandlerStateChange","nativeEvent","oldState","ACTIVE","close","onHandlerStateChange","ev","handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","onRowLayout","layout","width","openLeft","openRight","undefined","onGestureEvent","event","children","renderLeftActions","renderRightActions","left","styles","leftActions","transform","translateX","x","right","rightActions","container","containerStyle","childrenContainerStyle","defaultProps","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"sources":["D:/EquipmentBorrowingSystemApp/node_modules/react-native-gesture-handler/dist/src/components/Swipeable.js"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\nimport React, { Component } from 'react';\nimport { Animated, StyleSheet, View, I18nManager, } from 'react-native';\nimport { PanGestureHandler, TapGestureHandler, } from '../handlers/gestureHandlers';\nimport { State } from '../State';\nconst DRAG_TOSS = 0.05;\nexport default class Swipeable extends Component {\n    constructor(props) {\n        super(props);\n        this.updateAnimatedEvent = (props, state) => {\n            const { friction, overshootFriction } = props;\n            const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n            const { rightOffset = rowWidth } = state;\n            const rightWidth = Math.max(0, rowWidth - rightOffset);\n            const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0, } = props;\n            const transX = Animated.add(rowTranslation, dragX.interpolate({\n                inputRange: [0, friction],\n                outputRange: [0, 1],\n            })).interpolate({\n                inputRange: [\n                    -rightWidth - (overshootRight ? 1 : overshootFriction),\n                    -rightWidth,\n                    leftWidth,\n                    leftWidth + (overshootLeft ? 1 : overshootFriction),\n                ],\n                outputRange: [\n                    -rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0),\n                    -rightWidth,\n                    leftWidth,\n                    leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0),\n                ],\n            });\n            this.transX = transX;\n            this.showLeftAction =\n                leftWidth > 0\n                    ? transX.interpolate({\n                        inputRange: [-1, 0, leftWidth],\n                        outputRange: [0, 0, 1],\n                    })\n                    : new Animated.Value(0);\n            this.leftActionTranslate = this.showLeftAction.interpolate({\n                inputRange: [0, Number.MIN_VALUE],\n                outputRange: [-10000, 0],\n                extrapolate: 'clamp',\n            });\n            this.showRightAction =\n                rightWidth > 0\n                    ? transX.interpolate({\n                        inputRange: [-rightWidth, 0, 1],\n                        outputRange: [1, 0, 0],\n                    })\n                    : new Animated.Value(0);\n            this.rightActionTranslate = this.showRightAction.interpolate({\n                inputRange: [0, Number.MIN_VALUE],\n                outputRange: [-10000, 0],\n                extrapolate: 'clamp',\n            });\n        };\n        this.onTapHandlerStateChange = ({ nativeEvent, }) => {\n            if (nativeEvent.oldState === State.ACTIVE) {\n                this.close();\n            }\n        };\n        this.onHandlerStateChange = (ev) => {\n            if (ev.nativeEvent.oldState === State.ACTIVE) {\n                this.handleRelease(ev);\n            }\n        };\n        this.handleRelease = (ev) => {\n            const { velocityX, translationX: dragX } = ev.nativeEvent;\n            const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            const { friction, leftThreshold = leftWidth / 2, rightThreshold = rightWidth / 2, } = this.props;\n            const startOffsetX = this.currentOffset() + dragX / friction;\n            const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n            let toValue = 0;\n            if (rowState === 0) {\n                if (translationX > leftThreshold) {\n                    toValue = leftWidth;\n                }\n                else if (translationX < -rightThreshold) {\n                    toValue = -rightWidth;\n                }\n            }\n            else if (rowState === 1) {\n                // swiped to left\n                if (translationX > -leftThreshold) {\n                    toValue = leftWidth;\n                }\n            }\n            else {\n                // swiped to right\n                if (translationX < rightThreshold) {\n                    toValue = -rightWidth;\n                }\n            }\n            this.animateRow(startOffsetX, toValue, velocityX / friction);\n        };\n        this.animateRow = (fromValue, toValue, velocityX) => {\n            const { dragX, rowTranslation } = this.state;\n            dragX.setValue(0);\n            rowTranslation.setValue(fromValue);\n            this.setState({ rowState: Math.sign(toValue) });\n            Animated.spring(rowTranslation, {\n                restSpeedThreshold: 1.7,\n                restDisplacementThreshold: 0.4,\n                velocity: velocityX,\n                bounciness: 0,\n                toValue,\n                useNativeDriver: this.props.useNativeAnimations,\n                ...this.props.animationOptions,\n            }).start(({ finished }) => {\n                if (finished) {\n                    if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n                        this.props.onSwipeableLeftOpen();\n                    }\n                    else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n                        this.props.onSwipeableRightOpen();\n                    }\n                    if (toValue === 0) {\n                        this.props.onSwipeableClose?.();\n                    }\n                    else {\n                        this.props.onSwipeableOpen?.();\n                    }\n                }\n            });\n            if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n                this.props.onSwipeableLeftWillOpen();\n            }\n            else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n                this.props.onSwipeableRightWillOpen();\n            }\n            if (toValue === 0) {\n                this.props.onSwipeableWillClose?.();\n            }\n            else {\n                this.props.onSwipeableWillOpen?.();\n            }\n        };\n        this.onRowLayout = ({ nativeEvent }) => {\n            this.setState({ rowWidth: nativeEvent.layout.width });\n        };\n        this.currentOffset = () => {\n            const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            if (rowState === 1) {\n                return leftWidth;\n            }\n            else if (rowState === -1) {\n                return -rightWidth;\n            }\n            return 0;\n        };\n        this.close = () => {\n            this.animateRow(this.currentOffset(), 0);\n        };\n        this.openLeft = () => {\n            const { leftWidth = 0 } = this.state;\n            this.animateRow(this.currentOffset(), leftWidth);\n        };\n        this.openRight = () => {\n            const { rowWidth = 0 } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            this.animateRow(this.currentOffset(), -rightWidth);\n        };\n        const dragX = new Animated.Value(0);\n        this.state = {\n            dragX,\n            rowTranslation: new Animated.Value(0),\n            rowState: 0,\n            leftWidth: undefined,\n            rightOffset: undefined,\n            rowWidth: undefined,\n        };\n        this.updateAnimatedEvent(props, this.state);\n        this.onGestureEvent = Animated.event([{ nativeEvent: { translationX: dragX } }], { useNativeDriver: props.useNativeAnimations });\n    }\n    UNSAFE_componentWillUpdate(props, state) {\n        if (this.props.friction !== props.friction ||\n            this.props.overshootLeft !== props.overshootLeft ||\n            this.props.overshootRight !== props.overshootRight ||\n            this.props.overshootFriction !== props.overshootFriction ||\n            this.state.leftWidth !== state.leftWidth ||\n            this.state.rightOffset !== state.rightOffset ||\n            this.state.rowWidth !== state.rowWidth) {\n            this.updateAnimatedEvent(props, state);\n        }\n    }\n    render() {\n        const { rowState } = this.state;\n        const { children, renderLeftActions, renderRightActions } = this.props;\n        const left = renderLeftActions && (<Animated.View style={[\n            styles.leftActions,\n            // all those and below parameters can have ! since they are all asigned in constructor in `updateAnimatedEvent` but TS cannot spot it for some reason\n            { transform: [{ translateX: this.leftActionTranslate }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction, this.transX)}\n        <View onLayout={({ nativeEvent }) => this.setState({ leftWidth: nativeEvent.layout.x })}/>\n      </Animated.View>);\n        const right = renderRightActions && (<Animated.View style={[\n            styles.rightActions,\n            { transform: [{ translateX: this.rightActionTranslate }] },\n        ]}>\n        {renderRightActions(this.showRightAction, this.transX)}\n        <View onLayout={({ nativeEvent }) => this.setState({ rightOffset: nativeEvent.layout.x })}/>\n      </Animated.View>);\n        return (<PanGestureHandler activeOffsetX={[-10, 10]} {...this.props} onGestureEvent={this.onGestureEvent} onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View onLayout={this.onRowLayout} style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler enabled={rowState !== 0} onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View pointerEvents={rowState === 0 ? 'auto' : 'box-only'} style={[\n            {\n                transform: [{ translateX: this.transX }],\n            },\n            this.props.childrenContainerStyle,\n        ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>);\n    }\n}\nSwipeable.defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n};\nconst styles = StyleSheet.create({\n    container: {\n        overflow: 'hidden',\n    },\n    leftActions: {\n        ...StyleSheet.absoluteFillObject,\n        flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n    },\n    rightActions: {\n        ...StyleSheet.absoluteFillObject,\n        flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}