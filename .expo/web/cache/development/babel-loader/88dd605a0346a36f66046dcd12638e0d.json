{"ast":null,"code":"import { Direction } from \"./web/constants\";\nimport FlingGestureHandler from \"./web/FlingGestureHandler\";\nimport LongPressGestureHandler from \"./web/LongPressGestureHandler\";\nimport NativeViewGestureHandler from \"./web/NativeViewGestureHandler\";\nimport * as NodeManager from \"./web/NodeManager\";\nimport PanGestureHandler from \"./web/PanGestureHandler\";\nimport PinchGestureHandler from \"./web/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/RotationGestureHandler\";\nimport TapGestureHandler from \"./web/TapGestureHandler\";\nexport var Gestures = {\n  PanGestureHandler: PanGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  FlingGestureHandler: FlingGestureHandler\n};\nexport default {\n  Direction: Direction,\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures)) throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n    var GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, propsRef) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  }\n};","map":{"version":3,"names":["Direction","FlingGestureHandler","LongPressGestureHandler","NativeViewGestureHandler","NodeManager","PanGestureHandler","PinchGestureHandler","RotationGestureHandler","TapGestureHandler","Gestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","updateGestureHandler","attachGestureHandler","newView","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler"],"sources":["D:/EquipmentBorrowingSystemApp/node_modules/react-native-gesture-handler/dist/src/RNGestureHandlerModule.web.js"],"sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\nexport const Gestures = {\n    PanGestureHandler,\n    RotationGestureHandler,\n    PinchGestureHandler,\n    TapGestureHandler,\n    NativeViewGestureHandler,\n    LongPressGestureHandler,\n    FlingGestureHandler,\n};\nexport default {\n    Direction,\n    handleSetJSResponder(tag, blockNativeResponder) {\n        console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n    },\n    handleClearJSResponder() {\n        console.warn('handleClearJSResponder: ');\n    },\n    createGestureHandler(handlerName, handlerTag, config) {\n        //TODO(TS) extends config\n        if (!(handlerName in Gestures))\n            throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n        const GestureClass = Gestures[handlerName];\n        NodeManager.createGestureHandler(handlerTag, new GestureClass());\n        this.updateGestureHandler(handlerTag, config);\n    },\n    attachGestureHandler(handlerTag, newView, propsRef) {\n        NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    },\n    updateGestureHandler(handlerTag, newConfig) {\n        NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    },\n    getGestureHandlerNode(handlerTag) {\n        return NodeManager.getHandler(handlerTag);\n    },\n    dropGestureHandler(handlerTag) {\n        NodeManager.dropGestureHandler(handlerTag);\n    },\n};\n"],"mappings":"AAAA,SAASA,SAAT;AACA,OAAOC,mBAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,wBAAP;AACA,OAAO,KAAKC,WAAZ;AACA,OAAOC,iBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,iBAAP;AACA,OAAO,IAAMC,QAAQ,GAAG;EACpBJ,iBAAiB,EAAjBA,iBADoB;EAEpBE,sBAAsB,EAAtBA,sBAFoB;EAGpBD,mBAAmB,EAAnBA,mBAHoB;EAIpBE,iBAAiB,EAAjBA,iBAJoB;EAKpBL,wBAAwB,EAAxBA,wBALoB;EAMpBD,uBAAuB,EAAvBA,uBANoB;EAOpBD,mBAAmB,EAAnBA;AAPoB,CAAjB;AASP,eAAe;EACXD,SAAS,EAATA,SADW;EAEXU,oBAFW,gCAEUC,GAFV,EAEeC,oBAFf,EAEqC;IAC5CC,OAAO,CAACC,IAAR,CAAa,wBAAb,EAAuCH,GAAvC,EAA4CC,oBAA5C;EACH,CAJU;EAKXG,sBALW,oCAKc;IACrBF,OAAO,CAACC,IAAR,CAAa,0BAAb;EACH,CAPU;EAQXE,oBARW,gCAQUC,WARV,EAQuBC,UARvB,EAQmCC,MARnC,EAQ2C;IAElD,IAAI,EAAEF,WAAW,IAAIR,QAAjB,CAAJ,EACI,MAAM,IAAIW,KAAJ,oCAA2CH,WAA3C,+BAAN;IACJ,IAAMI,YAAY,GAAGZ,QAAQ,CAACQ,WAAD,CAA7B;IACAb,WAAW,CAACY,oBAAZ,CAAiCE,UAAjC,EAA6C,IAAIG,YAAJ,EAA7C;IACA,KAAKC,oBAAL,CAA0BJ,UAA1B,EAAsCC,MAAtC;EACH,CAfU;EAgBXI,oBAhBW,gCAgBUL,UAhBV,EAgBsBM,OAhBtB,EAgB+BC,QAhB/B,EAgByC;IAChDrB,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,EAAmCS,OAAnC,CAA2CH,OAA3C,EAAoDC,QAApD;EACH,CAlBU;EAmBXH,oBAnBW,gCAmBUJ,UAnBV,EAmBsBU,SAnBtB,EAmBiC;IACxCxB,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,EAAmCW,mBAAnC,CAAuDD,SAAvD;EACH,CArBU;EAsBXE,qBAtBW,iCAsBWZ,UAtBX,EAsBuB;IAC9B,OAAOd,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,CAAP;EACH,CAxBU;EAyBXa,kBAzBW,8BAyBQb,UAzBR,EAyBoB;IAC3Bd,WAAW,CAAC2B,kBAAZ,CAA+Bb,UAA/B;EACH;AA3BU,CAAf"},"metadata":{},"sourceType":"module"}