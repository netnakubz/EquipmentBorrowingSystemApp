{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler } from \"../handlers/gestureHandlers\";\nimport { State } from \"../State\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\n\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n\n  var _super = _createSuper(DrawerLayout);\n\n  function DrawerLayout(props) {\n    var _this;\n\n    _classCallCheck(this, DrawerLayout);\n\n    _this = _super.call(this, props);\n    _this.accessibilityIsModalView = React.createRef();\n    _this.pointerEventsView = React.createRef();\n    _this.panGestureHandler = React.createRef();\n    _this.drawerShown = false;\n\n    _this.updateAnimatedEvent = function (props, state) {\n      var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      _this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          _this.props.onDrawerSlide == null ? void 0 : _this.props.onDrawerSlide(position);\n        };\n      }\n\n      _this.onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    };\n\n    _this.handleContainerLayout = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n\n    _this.emitStateChanged = function (newState, drawerWillShow) {\n      _this.props.onDrawerStateChanged == null ? void 0 : _this.props.onDrawerStateChanged(newState, drawerWillShow);\n    };\n\n    _this.openingHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n\n    _this.onTapHandlerStateChange = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      if (_this.drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    };\n\n    _this.handleRelease = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props = _this.props,\n          drawerWidth = _this$props.drawerWidth,\n          drawerPosition = _this$props.drawerPosition,\n          drawerType = _this$props.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n\n    _this.updateShowing = function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) == null ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) == null ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props2 = _this.props,\n          drawerPosition = _this$props2.drawerPosition,\n          minSwipeDistance = _this$props2.minSwipeDistance,\n          edgeWidth = _this$props2.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) == null ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n\n    _this.animateDrawer = function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      var willShow = toValue !== 0;\n\n      _this.updateShowing(willShow);\n\n      _this.emitStateChanged(SETTLING, willShow);\n\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed != null ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n\n          if (willShow) {\n            _this.props.onDrawerOpen == null ? void 0 : _this.props.onDrawerOpen();\n          } else {\n            _this.props.onDrawerClose == null ? void 0 : _this.props.onDrawerClose();\n          }\n        }\n      });\n    };\n\n    _this.openDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    };\n\n    _this.closeDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    };\n\n    _this.renderOverlay = function () {\n      invariant(_this.openValue, 'should be set');\n\n      var overlayOpacity = _this.openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return _jsx(TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange,\n        children: _jsx(Animated.View, {\n          pointerEvents: _this.drawerShown ? 'auto' : 'none',\n          ref: _this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        })\n      });\n    };\n\n    _this.renderDrawer = function () {\n      var _this$props3 = _this.props,\n          drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n          drawerWidth = _this$props3.drawerWidth,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          drawerContainerStyle = _this$props3.drawerContainerStyle,\n          contentContainerStyle = _this$props3.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      var drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return _jsxs(Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout,\n        children: [_jsxs(Animated.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes',\n          children: [typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()]\n        }), _jsx(Animated.View, {\n          pointerEvents: \"box-none\",\n          ref: _this.accessibilityIsModalView,\n          accessibilityViewIsModal: _this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n          children: _jsx(View, {\n            style: dynamicDrawerStyles,\n            children: _this.props.renderNavigationView(_this.openValue)\n          })\n        })]\n      });\n    };\n\n    _this.setPanGestureRef = function (ref) {\n      _this.panGestureHandler.current = ref;\n      _this.props.onGestureRef == null ? void 0 : _this.props.onGestureRef(ref);\n    };\n\n    var dragX = new Animated.Value(0);\n    var touchX = new Animated.Value(0);\n    var drawerTranslation = new Animated.Value(0);\n    _this.state = {\n      dragX: dragX,\n      touchX: touchX,\n      drawerTranslation: drawerTranslation,\n      containerWidth: 0\n    };\n\n    _this.updateAnimatedEvent(props, _this.state);\n\n    return _this;\n  }\n\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerLockMode = _this$props4.drawerLockMode,\n          edgeWidth = _this$props4.edgeWidth,\n          minSwipeDistance = _this$props4.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return _jsx(PanGestureHandler, {\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        children: this.renderDrawer()\n      });\n    }\n  }]);\n\n  return DrawerLayout;\n}(Component);\n\nexport { DrawerLayout as default };\nDrawerLayout.defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n};\nDrawerLayout.positions = {\n  Left: 'left',\n  Right: 'right'\n};\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["React","Component","invariant","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","props","accessibilityIsModalView","createRef","pointerEventsView","panGestureHandler","drawerShown","updateAnimatedEvent","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","handleContainerLayout","setState","layout","width","emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","openingHandlerStateChange","oldState","ACTIVE","handleRelease","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","onTapHandlerStateChange","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","updateShowing","showing","current","setNativeProps","accessibilityViewIsModal","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","openDrawer","options","forceUpdate","renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","styles","overlay","renderDrawer","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","containerOnBack","containerInFront","children","drawerContainer","renderNavigationView","setPanGestureRef","ref","onGestureRef","enableTrackpadTwoFingerGesture","defaultProps","positions","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["D:/EquipmentBorrowingSystemApp/node_modules/react-native-gesture-handler/dist/src/components/DrawerLayout.js"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport { Animated, StyleSheet, View, Keyboard, StatusBar, I18nManager, } from 'react-native';\nimport { PanGestureHandler, TapGestureHandler, } from '../handlers/gestureHandlers';\nimport { State } from '../State';\nconst DRAG_TOSS = 0.05;\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\nexport default class DrawerLayout extends Component {\n    constructor(props) {\n        super(props);\n        this.accessibilityIsModalView = React.createRef();\n        this.pointerEventsView = React.createRef();\n        this.panGestureHandler = React.createRef();\n        this.drawerShown = false;\n        this.updateAnimatedEvent = (props, state) => {\n            // Event definition is based on\n            const { drawerPosition, drawerWidth, drawerType } = props;\n            const { dragX: dragXValue, touchX: touchXValue, drawerTranslation, containerWidth, } = state;\n            let dragX = dragXValue;\n            let touchX = touchXValue;\n            if (drawerPosition !== 'left') {\n                // Most of the code is written in a way to handle left-side drawer.\n                // In order to handle right-side drawer the only thing we need to\n                // do is to reverse events coming from gesture handler in a way they\n                // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n                // touchX is calulcated by subtracing real touchX from the width of the\n                // container (such that when touch happens at the right edge the value\n                // is simply 0)\n                dragX = Animated.multiply(new Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n                touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n                touchXValue.setValue(containerWidth);\n            }\n            else {\n                touchXValue.setValue(0);\n            }\n            // While closing the drawer when user starts gesture outside of its area (in greyed\n            // out part of the window), we want the drawer to follow only once finger reaches the\n            // edge of the drawer.\n            // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n            // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n            // an arrow pointing left\n            // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    +---------------+    +---------------+    +---------------+    +---------------+\n            //\n            // For the above to work properly we define animated value that will keep start position\n            // of the gesture. Then we use that value to calculate how much we need to subtract from\n            // the dragX. If the gesture started on the greyed out area we take the distance from the\n            // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n            // drawer be pulled back as soon as you start the pan.\n            //\n            // This is used only when drawerType is \"front\"\n            //\n            let translationX = dragX;\n            if (drawerType === 'front') {\n                const startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n                const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n                    inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n                    outputRange: [0, 0, 1],\n                });\n                translationX = Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n            }\n            this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n                inputRange: [0, drawerWidth],\n                outputRange: [0, 1],\n                extrapolate: 'clamp',\n            });\n            const gestureOptions = {\n                useNativeDriver: props.useNativeAnimations,\n            };\n            if (this.props.onDrawerSlide) {\n                gestureOptions.listener = (ev) => {\n                    const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n                    const position = translationX / this.state.containerWidth;\n                    this.props.onDrawerSlide?.(position);\n                };\n            }\n            this.onGestureEvent = Animated.event([{ nativeEvent: { translationX: dragXValue, x: touchXValue } }], gestureOptions);\n        };\n        this.handleContainerLayout = ({ nativeEvent }) => {\n            this.setState({ containerWidth: nativeEvent.layout.width });\n        };\n        this.emitStateChanged = (newState, drawerWillShow) => {\n            this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n        };\n        this.openingHandlerStateChange = ({ nativeEvent, }) => {\n            if (nativeEvent.oldState === State.ACTIVE) {\n                this.handleRelease({ nativeEvent });\n            }\n            else if (nativeEvent.state === State.ACTIVE) {\n                this.emitStateChanged(DRAGGING, false);\n                if (this.props.keyboardDismissMode === 'on-drag') {\n                    Keyboard.dismiss();\n                }\n                if (this.props.hideStatusBar) {\n                    StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n                }\n            }\n        };\n        this.onTapHandlerStateChange = ({ nativeEvent, }) => {\n            if (this.drawerShown &&\n                nativeEvent.oldState === State.ACTIVE &&\n                this.props.drawerLockMode !== 'locked-open') {\n                this.closeDrawer();\n            }\n        };\n        this.handleRelease = ({ nativeEvent, }) => {\n            const { drawerWidth, drawerPosition, drawerType } = this.props;\n            const { containerWidth } = this.state;\n            let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n            if (drawerPosition !== 'left') {\n                // See description in _updateAnimatedEvent about why events are flipped\n                // for right-side drawer\n                dragX = -dragX;\n                touchX = containerWidth - touchX;\n                velocityX = -velocityX;\n            }\n            const gestureStartX = touchX - dragX;\n            let dragOffsetBasedOnStart = 0;\n            if (drawerType === 'front') {\n                dragOffsetBasedOnStart =\n                    gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n            }\n            const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n            const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n            const shouldOpen = projOffsetX > drawerWidth / 2;\n            if (shouldOpen) {\n                this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n            }\n            else {\n                this.animateDrawer(startOffsetX, 0, velocityX);\n            }\n        };\n        this.updateShowing = (showing) => {\n            this.drawerShown = showing;\n            this.accessibilityIsModalView.current?.setNativeProps({\n                accessibilityViewIsModal: showing,\n            });\n            this.pointerEventsView.current?.setNativeProps({\n                pointerEvents: showing ? 'auto' : 'none',\n            });\n            const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n            const fromLeft = drawerPosition === 'left';\n            // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n            // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n            // orientation will be 1.\n            const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n            // When drawer is closed we want the hitSlop to be horizontally shorter\n            // than the container size by the value of SLOP. This will make it only\n            // activate when gesture happens not further than SLOP away from the edge\n            const hitSlop = fromLeft\n                ? { left: 0, width: showing ? undefined : edgeWidth }\n                : { right: 0, width: showing ? undefined : edgeWidth };\n            // @ts-ignore internal API, maybe could be fixed in handler types\n            this.panGestureHandler.current?.setNativeProps({\n                hitSlop,\n                activeOffsetX: gestureOrientation * minSwipeDistance,\n            });\n        };\n        this.animateDrawer = (fromValue, toValue, velocity, speed) => {\n            this.state.dragX.setValue(0);\n            this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n            if (fromValue != null) {\n                let nextFramePosition = fromValue;\n                if (this.props.useNativeAnimations) {\n                    // When using native driver, we predict the next position of the animation\n                    // because it takes one frame of a roundtrip to pass RELEASE event from\n                    // native driver to JS before we can start animating. Without it, it is more\n                    // noticable that the frame is dropped.\n                    if (fromValue < toValue && velocity > 0) {\n                        nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n                    }\n                    else if (fromValue > toValue && velocity < 0) {\n                        nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n                    }\n                }\n                this.state.drawerTranslation.setValue(nextFramePosition);\n            }\n            const willShow = toValue !== 0;\n            this.updateShowing(willShow);\n            this.emitStateChanged(SETTLING, willShow);\n            if (this.props.hideStatusBar) {\n                StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n            }\n            Animated.spring(this.state.drawerTranslation, {\n                velocity,\n                bounciness: 0,\n                toValue,\n                useNativeDriver: this.props.useNativeAnimations,\n                speed: speed ?? undefined,\n            }).start(({ finished }) => {\n                if (finished) {\n                    this.emitStateChanged(IDLE, willShow);\n                    if (willShow) {\n                        this.props.onDrawerOpen?.();\n                    }\n                    else {\n                        this.props.onDrawerClose?.();\n                    }\n                }\n            });\n        };\n        this.openDrawer = (options = {}) => {\n            this.animateDrawer(\n            // TODO: decide if it should be null or undefined is the proper value\n            undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0);\n            // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n            this.forceUpdate();\n        };\n        this.closeDrawer = (options = {}) => {\n            // TODO: decide if it should be null or undefined is the proper value\n            this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n            // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n            this.forceUpdate();\n        };\n        this.renderOverlay = () => {\n            /* Overlay styles */\n            invariant(this.openValue, 'should be set');\n            const overlayOpacity = this.openValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, 1],\n                extrapolate: 'clamp',\n            });\n            const dynamicOverlayStyles = {\n                opacity: overlayOpacity,\n                backgroundColor: this.props.overlayColor,\n            };\n            return (<TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View pointerEvents={this.drawerShown ? 'auto' : 'none'} ref={this.pointerEventsView} style={[styles.overlay, dynamicOverlayStyles]}/>\n      </TapGestureHandler>);\n        };\n        this.renderDrawer = () => {\n            const { drawerBackgroundColor, drawerWidth, drawerPosition, drawerType, drawerContainerStyle, contentContainerStyle, } = this.props;\n            const fromLeft = drawerPosition === 'left';\n            const drawerSlide = drawerType !== 'back';\n            const containerSlide = drawerType !== 'front';\n            // we rely on row and row-reverse flex directions to position the drawer\n            // properly. Apparently for RTL these are flipped which requires us to use\n            // the opposite setting for the drawer to appear from left or right according\n            // to the drawerPosition prop\n            const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n            const dynamicDrawerStyles = {\n                backgroundColor: drawerBackgroundColor,\n                width: drawerWidth,\n            };\n            const openValue = this.openValue;\n            invariant(openValue, 'should be set');\n            let containerStyles;\n            if (containerSlide) {\n                const containerTranslateX = openValue.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n                    extrapolate: 'clamp',\n                });\n                containerStyles = {\n                    transform: [{ translateX: containerTranslateX }],\n                };\n            }\n            let drawerTranslateX = 0;\n            if (drawerSlide) {\n                const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n                drawerTranslateX = openValue.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [closedDrawerOffset, 0],\n                    extrapolate: 'clamp',\n                });\n            }\n            const drawerStyles = {\n                transform: [{ translateX: drawerTranslateX }],\n                flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n            };\n            return (<Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View style={[\n                drawerType === 'front'\n                    ? styles.containerOnBack\n                    : styles.containerInFront,\n                containerStyles,\n                contentContainerStyle,\n            ]} importantForAccessibility={this.drawerShown ? 'no-hide-descendants' : 'yes'}>\n          {typeof this.props.children === 'function'\n                ? this.props.children(this.openValue)\n                : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View pointerEvents=\"box-none\" ref={this.accessibilityIsModalView} accessibilityViewIsModal={this.drawerShown} style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue)}\n          </View>\n        </Animated.View>\n      </Animated.View>);\n        };\n        this.setPanGestureRef = (ref) => {\n            // TODO(TS): make sure it is OK\n            // taken from https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n            this\n                .panGestureHandler.current = ref;\n            this.props.onGestureRef?.(ref);\n        };\n        const dragX = new Animated.Value(0);\n        const touchX = new Animated.Value(0);\n        const drawerTranslation = new Animated.Value(0);\n        this.state = {\n            dragX,\n            touchX,\n            drawerTranslation,\n            containerWidth: 0,\n        };\n        this.updateAnimatedEvent(props, this.state);\n    }\n    UNSAFE_componentWillUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition ||\n            this.props.drawerWidth !== props.drawerWidth ||\n            this.props.drawerType !== props.drawerType ||\n            this.state.containerWidth !== state.containerWidth) {\n            this.updateAnimatedEvent(props, state);\n        }\n    }\n    render() {\n        const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance, } = this.props;\n        const fromLeft = drawerPosition === 'left';\n        // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n        // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n        // orientation will be 1.\n        const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n        // When drawer is closed we want the hitSlop to be horizontally shorter\n        // than the container size by the value of SLOP. This will make it only\n        // activate when gesture happens not further than SLOP away from the edge\n        const hitSlop = fromLeft\n            ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n            : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n        return (<PanGestureHandler \n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef} hitSlop={hitSlop} activeOffsetX={gestureOrientation * minSwipeDistance} failOffsetY={[-15, 15]} onGestureEvent={this.onGestureEvent} onHandlerStateChange={this.openingHandlerStateChange} enableTrackpadTwoFingerGesture={this.props.enableTrackpadTwoFingerGesture} enabled={drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'}>\n        {this.renderDrawer()}\n      </PanGestureHandler>);\n    }\n}\nDrawerLayout.defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n};\nDrawerLayout.positions = {\n    Left: 'left',\n    Right: 'right',\n};\nconst styles = StyleSheet.create({\n    drawerContainer: {\n        ...StyleSheet.absoluteFillObject,\n        zIndex: 1001,\n        flexDirection: 'row',\n    },\n    containerInFront: {\n        ...StyleSheet.absoluteFillObject,\n        zIndex: 1002,\n    },\n    containerOnBack: {\n        ...StyleSheet.absoluteFillObject,\n    },\n    main: {\n        flex: 1,\n        zIndex: 0,\n        overflow: 'hidden',\n    },\n    overlay: {\n        ...StyleSheet.absoluteFillObject,\n        zIndex: 1000,\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}